{"version":3,"sources":["util/generate-number.js","components/RandomColorCard.js","App.js","serviceWorker.js","index.js"],"names":["generateNumber","begin","end","Math","random","RandomColorCard","useState","red","green","blue","colorValue","setColorValue","copyStatus","setCopyStatus","color","className","style","background","height","borderTopLeftRadius","borderTopRightRadius","text","onCopy","setTimeout","src","process","alt","onClick","redColorValue","greenColorValue","blueColorValue","generateColorValue","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAAaA,EAAiB,SAACC,EAAOC,GACpC,SAAUC,KAAKC,SAAWF,EAAMD,I,eCIrBI,EAAkB,WAAO,IAAD,EACCC,mBAAS,CAC3CC,IAAK,IACLC,MAAO,IACPC,KAAM,MAJ2B,mBAC5BC,EAD4B,KAChBC,EADgB,OAOCL,qBAPD,mBAO5BM,EAP4B,KAOhBC,EAPgB,KA4B7BC,EAAK,cAAUJ,EAAWH,IAArB,aAA6BG,EAAWF,MAAxC,aAAkDE,EAAWD,KAA7D,KACX,OACE,yBAAKM,UAAU,gBACb,yBACEC,MAAO,CACLC,WAAYH,EACZI,OAAQ,OACRC,oBAAqB,MACrBC,qBAAsB,SAG1B,yBAAKL,UAAU,cACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,aAAaD,GAC5B,yBAAKC,UAAU,gBACG,OAAfH,EAAsBA,EAAa,KAGxC,kBAAC,kBAAD,CACEG,UAAU,iBACVM,KAAMP,EACNQ,OAAQ,kBAvCdT,EAAc,4BACdU,YAAW,WACTV,EAAc,QACb,OAsCG,yBACEK,OAAO,OACPM,IAAG,UAAKC,0BAAL,oCACHC,IAAI,gBAIV,4BACEC,QAAS,YA5CY,WACzB,IAAMC,EAAgB5B,EAAe,EAAG,KAClC6B,EAAkB7B,EAAe,EAAG,KACpC8B,EAAiB9B,EAAe,EAAG,KAEzCW,EAAc,2BACTD,GADQ,IAEXH,IAAKqB,EACLpB,MAAOqB,EACPpB,KAAMqB,KAoCFC,IAEFhB,UAAU,uBAJZ,kBCjDSiB,MAVf,WACE,OACE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,oBACb,kBAAC,EAAD,SCIYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed3fd30c.chunk.js","sourcesContent":["export const generateNumber = (begin, end) => {\r\n  return ~~(Math.random() * end + begin);\r\n};\r\n","import React, { useState } from 'react';\r\nimport { generateNumber } from '../util/generate-number';\r\nimport './random-color.scss';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\n\r\nexport const RandomColorCard = () => {\r\n  const [colorValue, setColorValue] = useState({\r\n    red: 200,\r\n    green: 200,\r\n    blue: 200,\r\n  });\r\n\r\n  const [copyStatus, setCopyStatus] = useState();\r\n\r\n  const copyDone = () => {\r\n    setCopyStatus('Copied to clipboard');\r\n    setTimeout(() => {\r\n      setCopyStatus(null);\r\n    }, 1000);\r\n  };\r\n  const generateColorValue = () => {\r\n    const redColorValue = generateNumber(0, 255);\r\n    const greenColorValue = generateNumber(0, 255);\r\n    const blueColorValue = generateNumber(0, 255);\r\n\r\n    setColorValue({\r\n      ...colorValue,\r\n      red: redColorValue,\r\n      green: greenColorValue,\r\n      blue: blueColorValue,\r\n    });\r\n  };\r\n\r\n  const color = `rgb(${colorValue.red}, ${colorValue.green}, ${colorValue.blue})`;\r\n  return (\r\n    <div className=\"card-wrapper\">\r\n      <div\r\n        style={{\r\n          background: color,\r\n          height: '25em',\r\n          borderTopLeftRadius: '5px',\r\n          borderTopRightRadius: '5px',\r\n        }}\r\n      ></div>\r\n      <div className=\"copy-color\">\r\n        <div className=\"color-code\">\r\n          <div className=\"color-rgb\">{color}</div>\r\n          <div className=\"color-status\">\r\n            {copyStatus !== null ? copyStatus : ''}\r\n          </div>\r\n        </div>\r\n        <CopyToClipboard\r\n          className=\"clipboard-comp\"\r\n          text={color}\r\n          onCopy={() => copyDone()}\r\n        >\r\n          <img\r\n            height=\"32px\"\r\n            src={`${process.env.PUBLIC_URL}/static-files/clipboard-icon.png`}\r\n            alt=\"clipboard\"\r\n          />\r\n        </CopyToClipboard>\r\n      </div>\r\n      <button\r\n        onClick={() => {\r\n          generateColorValue();\r\n        }}\r\n        className=\"change-color-button\"\r\n      >\r\n        Change Color\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.scss';\nimport { RandomColorCard } from './components/RandomColorCard';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app-card-wrapper\">\n        <RandomColorCard></RandomColorCard>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}